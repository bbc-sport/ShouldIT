#!/usr/bin/env node

"use strict";
console.log(process.argv.slice(2));

// process.argv.slice(2).forEach(function(arg){
//   var flag = arg.split('=')[0];

//   switch (flag) {
//     case '-d':
//       args.unshift('--debug');
//       break;
//     case 'debug':
//     case '--debug':
//     case '--debug-brk':
//       args.unshift(arg);
//       break;
//     case '-gc':
//     case '--expose-gc':
//       args.unshift('--expose-gc');
//       break;
//     case '--gc-global':
//     case '--harmony':
//     case '--harmony-proxies':
//     case '--harmony-collections':
//     case '--harmony-generators':
//     case '--prof':
//       args.unshift(arg);
//       break;
//     default:
//       if (0 == arg.indexOf('--trace')) args.unshift(arg);
//       else args.push(arg);
//       break;
//   }
// });

var configBuilder = require('../lib/configBuilder'),
    featureTransformer = require('../lib/featureTransformer'),
    specCollector = require('../lib/specCollector'),
    fileCollector = require('../lib/fileCollector'),
    resultCollector = require('../lib/resultCollector'),
    inspector = require('../lib/inspector'),
    spitterOuter = require('../lib/spitterOuter'),
    XmlWriter = require('../lib/junitXmlWriter'),
    jf = require('jsonfile'),
    fs = require('fs'),
    config = configBuilder(process.argv);


function compareOutputFiles(specFile, resultsFile) {

        /**
         * Use the collector to get the content of each file
         */
        fileCollector(specFile, resultsFile, function(files){
            var results = inspector(files);
            var writer = new XmlWriter();
            writer.writeResults(results);
            var output = spitterOuter(results);
            for (var i = 0; i < output.length; i++) {
                console.log(output[i]);
            }
        });
    }

/**
 * Get the specs from the spec collector
 */
specCollector(config.specGlob, function(specs) {

    fs.writeFile(config.specFile, JSON.stringify(specs, null, 4), function (err) {
        /**
         * Get the result results from the result collector
         */
        resultCollector(config.resultsGlob, function(results) {

            fs.writeFile(config.resultsFile, JSON.stringify(results, null, 4), function (err) {
                compareOutputFiles(config.specFile, config.resultsFile);

            });

        });
    });
});