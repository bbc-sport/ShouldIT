{
    "Config Builder": {
        "should be able to take a set input file": "PASSED",
        "should be able to take a set file to compare to": "PASSED",
        "should raise an exeption if the input file isnt passed": "PASSED",
        "should raise an exeption if the comparison file isnt passed": "PASSED"
    },
    "Feature parsing": {
        "callsback with the first spec found": "PASSED",
        "handles lowercase it": "PASSED",
        "adds describe that the spec is nested in": "PASSED",
        "can add multiple levels of describes": "PASSED",
        "can remove a describe when it is closed": "PASSED",
        "can delimit describes with new lines": "PASSED",
        "calls the callback for each IT": "PASSED",
        "sets the last line flag on the last line": "PASSED",
        "returns the line that the IT was found on": "PASSED"
    },
    "Transformation": {
        "transforms a single IT": "PASSED",
        "transforms a describe": "PASSED",
        "transforms nested describes": "PASSED",
        "ignores empty describes": "PASSED",
        "handles multiple describes": "PASSED",
        "can handle newlines as a delimiter": "PASSED",
        "can parse a real feature": "PASSED"
    },
    "Transformation parsing markdown": {
        "can parse a markdown file": "PASSED"
    },
    "File Collector": {
        "should take 2 add them to a list": "PASSED"
    },
    "File Collector input files contents": {
        "should be that of the feature spec": "PASSED"
    },
    "File Collector second files contents": {
        "should be that of the feature spec": "PASSED"
    },
    "Inspector full": {
        "should match top level specs": "PASSED",
        "should match first level specs": "PASSED",
        "should match second level specs": "PASSED",
        "should match nested and non nested specs": "PASSED"
    },
    "Inspector": {
        "should tell when a match is found": "PASSED",
        "should tell when a match is not found": "PASSED",
        "should tell when a non suite-ed match is found": "PASSED",
        "should handle the spec not matching the output": "PASSED",
        "should handle multiple ITS inside a describe": "PASSED",
        "should tell when a match is found but has a failing test": "PASSED",
        "should tell when a nested match is found": "PASSED"
    },
    "junit XML writer": {
        "creates a passing testcase for a spec": "PASSED",
        "handles multiple passing specs": "PASSED",
        "adds a skipped node for pending specs": "PASSED",
        "adds a failure node for failing specs": "PASSED",
        "handles a spec that isnt nested in a describe": "PASSED"
    },
    "junit XML writer counting the specs": {
        "specifies the correct number of tests in a suite": "PASSED",
        "counts the number of specs including failing and pending": "PASSED"
    },
    "Markdown parser": {
        "callsback with the first spec found": "PASSED",
        "adds describe that the spec is nested in": "PASSED",
        "replaces the suite if a header is found at the same level": "PASSED",
        "removes any suites that have been closed by a smaller level of header": "PASSED",
        "handles specs defined with a +": "PASSED",
        "handles files with extra returns": "PASSED",
        "skips a file with a chevron on the first line": "PASSED",
        "skips a file with a skip regardless of case": "PASSED",
        "matches skips with no space between the chevron and skip keyword": "PASSED",
        "skips everything after a skip": "PASSED",
        "strips its from the matched spec": "PASSED"
    },
    "parserFactory": {
        "returns the feature parser by default": "PASSED",
        "returns the markdown parser for file with an md extension": "PASSED",
        "takes the file extensions from the characters after the last period in a string": "PASSED"
    },
    "Spec collector": {
        "resolves the glob and calls the feature transformer for each file": "PASSED",
        "should fire a callback passing in an object made up of merged objects": "PASSED"
    },
    "Spitter Outer": {
        "colorise output into an array of console messages": "PASSED"
    }
}