{
    "nodes": [
        {
            "name": "Transformation",
            "shoulds": {
                "transforms a single IT": "specs/transformation.feature.md:3",
                "can parse a real feature": "specs/transformation.feature.md:4"
            },
            "depth": 0,
            "key": "Transformation"
        },
        {
            "name": "Parsing Markdown",
            "shoulds": {
                "can parse a markdown file": "specs/transformation.feature.md:8"
            },
            "depth": 1,
            "key": "Transformation Parsing Markdown"
        },
        {
            "name": "Config Builder",
            "shoulds": {
                "should be able to take a set input file": "specs/config-builder.feature.md:3",
                "should be able to take a set file to compare to": "specs/config-builder.feature.md:4",
                "should raise an exeption if the input file isnt passed": "specs/config-builder.feature.md:5",
                "should raise an exeption if the comparison file isnt passed": "specs/config-builder.feature.md:6",
                "should be able to add a comma deliminated tag": "specs/config-builder.feature.md:7",
                "should be turn results into an array": "specs/config-builder.feature.md:8",
                "should be able to read config from a default file": "specs/config-builder.feature.md:9",
                "should be able to read config from a specified file": "specs/config-builder.feature.md:10"
            },
            "depth": 0,
            "key": "Config Builder"
        },
        {
            "name": "File Collector",
            "shoulds": {
                "should take 2 add them to a list": "specs/file-collector.feature.md:3"
            },
            "depth": 0,
            "key": "File Collector"
        },
        {
            "name": "Input files contents",
            "shoulds": {
                "should be that of the feature spec": "specs/file-collector.feature.md:7"
            },
            "depth": 1,
            "key": "File Collector Input files contents"
        },
        {
            "name": "Second files contents",
            "shoulds": {
                "should be that of the feature spec": "specs/file-collector.feature.md:11"
            },
            "depth": 1,
            "key": "File Collector Second files contents"
        },
        {
            "name": "Markdown parser",
            "shoulds": {
                "callsback with the first spec found": "specs/markdown-parser.feature.md:3",
                "adds describe that the spec is nested in": "specs/markdown-parser.feature.md:4",
                "replaces the suite if a header is found at the same level": "specs/markdown-parser.feature.md:5",
                "removes any suites that have been closed by a smaller level of header": "specs/markdown-parser.feature.md:6",
                "handles specs defined with a +": "specs/markdown-parser.feature.md:7",
                "handles files with extra returns": "specs/markdown-parser.feature.md:8",
                "skips a file with a chevron on the first line": "specs/markdown-parser.feature.md:9",
                "skips a file with a skip regardless of case": "specs/markdown-parser.feature.md:10",
                "matches skips with no space between the chevron and skip keyword": "specs/markdown-parser.feature.md:11",
                "skips everything after a skip": "specs/markdown-parser.feature.md:12",
                "strips its from the matched spec": "specs/markdown-parser.feature.md:13",
                "matches markers and returns only those specs when a marker is supplied": "specs/markdown-parser.feature.md:14"
            },
            "depth": 0,
            "key": "Markdown parser"
        },
        {
            "name": "Inspector",
            "shoulds": {
                "should tell when a match is found": "specs/inspector.feature.md:3",
                "should tell when a match is not found": "specs/inspector.feature.md:4",
                "should tell when a non suite-ed match is found": "specs/inspector.feature.md:5",
                "should handle the spec not matching the output": "specs/inspector.feature.md:6",
                "should handle multiple ITS inside a describe": "specs/inspector.feature.md:7",
                "should tell when a match is found but has a failing test": "specs/inspector.feature.md:8",
                "should tell when a nested match is found": "specs/inspector.feature.md:9"
            },
            "depth": 0,
            "key": "Inspector"
        },
        {
            "name": "Full",
            "shoulds": {
                "should match top level specs": "specs/inspector.feature.md:12",
                "should match first level specs": "specs/inspector.feature.md:13",
                "should match second level specs": "specs/inspector.feature.md:14",
                "should match nested and non nested specs": "specs/inspector.feature.md:15"
            },
            "depth": 1,
            "key": "Inspector Full"
        },
        {
            "name": "Result collector",
            "shoulds": {
                "should fire a callback passing in an object made up of merged objects": "specs/others.feature.md:3"
            },
            "depth": 0,
            "key": "Result collector"
        },
        {
            "name": "Spec collector",
            "shoulds": {
                "resolves the glob and calls the feature transformer for each file": "specs/others.feature.md:6",
                "should fire a callback passing in an object made up of merged objects": "specs/others.feature.md:7"
            },
            "depth": 0,
            "key": "Spec collector"
        },
        {
            "name": "Spitter Outer",
            "shoulds": {
                "colorise output into an array of console messages": "specs/others.feature.md:11"
            },
            "depth": 0,
            "key": "Spitter Outer"
        },
        {
            "name": "Template Renderer",
            "shoulds": {
                "should be able to render a JS template": "specs/others.feature.md:14",
                "should be able to render a java template": "specs/others.feature.md:15",
                "should be able to render a php template": "specs/others.feature.md:16"
            },
            "depth": 0,
            "key": "Template Renderer"
        },
        {
            "name": "JUnit",
            "shoulds": [],
            "depth": 0,
            "key": "JUnit"
        },
        {
            "name": "Converter",
            "shoulds": {
                "should be able to normalise the testsuite name": "specs/junit.feature.md:4",
                "should be able to normalise the testcase name": "specs/junit.feature.md:5",
                "should be able parse a javaservices JUnit file": "specs/junit.feature.md:6",
                "should be able parse a nexted JUnit file that has failures": "specs/junit.feature.md:7"
            },
            "depth": 1,
            "key": "JUnit Converter"
        },
        {
            "name": "XML writer",
            "shoulds": {
                "creates a passing testcase for a spec": "specs/junit.feature.md:11",
                "handles multiple passing specs": "specs/junit.feature.md:12",
                "adds a skipped node for pending specs": "specs/junit.feature.md:13",
                "adds a failure node for failing specs": "specs/junit.feature.md:14",
                "handles a spec that isnt nested in a describe": "specs/junit.feature.md:15"
            },
            "depth": 1,
            "key": "JUnit XML writer"
        },
        {
            "name": "Spec Counting",
            "shoulds": {
                "specifies the correct number of tests in a suite": "specs/junit.feature.md:19",
                "counts the number of specs including failing and pending": "specs/junit.feature.md:20"
            },
            "depth": 2,
            "key": "JUnit XML writer Spec Counting"
        },
        {
            "name": "ShouldIT App",
            "key": "ShouldIT App"
        }
    ],
    "links": [
        {
            "source": 0,
            "target": 1
        },
        {
            "source": 3,
            "target": 4
        },
        {
            "source": 3,
            "target": 5
        },
        {
            "source": 7,
            "target": 8
        },
        {
            "source": 13,
            "target": 14
        },
        {
            "source": 13,
            "target": 15
        },
        {
            "source": 15,
            "target": 16
        },
        {
            "source": 17,
            "target": 3
        },
        {
            "source": 3,
            "target": 8
        }
    ]
}